#include <iostream>
#include <bits/stdc++.h>
#define ll long long
#define int ll
#define INF 1000000000000000000
#define forn(i, n) for (int i = 0; i < n; i++)
#define fornn(i, n) for (int i = 1; i <= n; i++)
#define iter(i) i.begin(), i.end()
#define pb push_back
#define endl "\n"
#define vi vector<int>
#define p(x) array<int, x>
#define out(x) cout << (x) << endl

using namespace std;

vi a;
vi visited;
vi cycles;
int cur_branch = 0;
int cur_cycle = 0;
vi branch_origin;
vi sizes;
vi cycle_sizes;

p(2) dfs(int v){
    if(visited[v]){
        if(visited[v] == 1){
            // new discovered
            cur_cycle++;
            cycles[v] = cur_cycle;
            return {v, 0};   
        }
        else if(visited[v] == 2){
            // already discovered this is a branch
            if(cycles[v] > -1){
                // new branch
                cur_branch--;
                return {-1*(v+1), cur_branch};
            }
            else{
                return {branch_origin[v], cycles[v]};
            }
        }
    }

    visited[v] = 1;

    p(2) ans = dfs(a[v]);

    visited[v] = 2;

    sizes[v] = sizes[a[v]]+1;

    if(ans[0] == v){
        // back at node
        cur_branch--;
        cycles[v] = cycles[a[v]];
        cycle_sizes[cycles[v]] = sizes[v];
        return {-1*(v+1), cur_branch};
    }
    else if(ans[0] < 0){
        // branch
        if(cycles[a[v]] > -1){
            sizes[v] = 1;
        }
        branch_origin[-1*cur_branch] = (-1*ans[0])-1;
        cycles[v] = cur_branch;
        return ans;
    }
    else{
        cycles[v] = cycles[a[v]];
        return ans;
    }
}

int solve1(int vn, vi vinput)
{
    int log_max = 20;
    int n, q;
    cin >> n >> q;
    visited = vi(n, 0);
    cycles = vi(n, 0);
    branch_origin = vi(n+1, 0);
    sizes = vi(n, 0);
    cycle_sizes = vi(n+1, 0);
    vector<vi> jump(n, vi(log_max, 0));

    forn(i, n){
        int input;
        cin >> input;
        input--;
        a.pb(input);
    }

    forn(i, n){
        for(int x = 0; x < log_max; x++){
            if(x == 0){
                jump[i][x] = a[i];
                continue;
            }
            jump[i][x] = jump[jump[i][x/2]][x/2];
        }
    }

    forn(i, n){
        if(visited[i]) continue;
        dfs(i);
    }

    forn(i, q){
        int v1, v2;
        cin >> v1 >> v2;
        v1--; v2--;
        // case 1 both v1 and v2 in cycle
        if(cycles[v1] > -1 && cycles[v2] > -1){
            // then both should be in the same cycle
            if(cycles[v1] == cycles[v2]){
                // difference is
                int diff = sizes[v1] - sizes[v2];
                if(diff < 0){
                    diff += cycle_sizes[cycles[v1]];
                }
                out(diff);
                continue;
            }
        }
        // case 2 v1 in branch v2 in cycle
        if(cycles[v1] < 0 && cycles[v2] > -1){
            // then v1 origin should be cycle of v2
            if(cycles[branch_origin[-1*cycles[v1]]] == cycles[v2]){
                // then output is v1 distance to cycle and origin diff v2
                int diff = sizes[branch_origin[-1*cycles[v1]]] - sizes[v2];
                if(diff < 0){
                    diff += cycle_sizes[cycles[v2]];
                }
                out(diff+sizes[v1]);
                continue;
            }
        }
        // case 3 both v1 and v2 in branch
        if(cycles[v1] < 0 && cycles[v2] < 0){
            // then both should be in same branch and v1 should be farther from v2
            if(cycles[v1] == cycles[v2] && sizes[v1] >= sizes[v2]){
                // check if we can reach v1 from v2
                int current = v1;
                int m_j = sizes[v1]-sizes[v2];
                
                for(int f = 0; (1 << f) <= m_j; f++){
                    if(m_j & (1 << f)) current = jump[current][f];
                    //cout << current << " " << sizes[current] << endl;
                }

                //out("test");
                if(current == v2){
                    out(sizes[v1] - sizes[v2]);
                    continue;
                }
            }
        }
        out(-1);
    }
}

int solve2(int vn, vi vinput)
{
    int planet_num;
    int query_num;
    std::cin >> planet_num >> query_num;
    vector<int> next(planet_num);
    vector<vector<int>> before(planet_num);

    for (int p = 0; p < planet_num; p++){
        std::cin >> next[p];
        next[p]--;
        before[next[p]].push_back(p);
    }

    vector<int> cycle_id(planet_num, -2);
    // Each map, given a planet #, returns the index of that planet in the cycle.
    vector<std::map<int, int>> cycles;

    for (int p = 0; p < planet_num; p++){
        if (cycle_id[p] != -2) continue;

        vector<int> path{p};
        int at = p;

        while (cycle_id[next[at]] == -2){
            at = next[at];
            cycle_id[at] = -3; // Leave breadcrumbs for this iteration
            path.push_back(at);
        }

        std::map<int, int> cycle;
        bool in_cycle = false;

        for (int i : path){
            in_cycle = in_cycle || i == next[at];
            if (in_cycle){
                cycle[i] = cycle.size();
            }
            cycle_id[i] = in_cycle ? cycles.size() : -1;
        }
        cycles.push_back(cycle);
    }

    vector<int> cyc_dist(planet_num);

    for (int p = 0; p < planet_num; p++){
        // Check if this planet is part of a cycle.

        if (cycle_id[next[p]] == -1 || cycle_id[p] != -1)
            continue;

        cyc_dist[p] = 1;
        vector<int> stack(before[p]);

        while (!stack.empty()){
            int curr = stack.back();
            stack.pop_back();
            cyc_dist[curr] = cyc_dist[next[curr]] + 1;
            stack.insert(stack.end(), before[curr].begin(), before[curr].end());
        }
    }

    // Intialize the binary jumping arrays.

    int log2 = std::ceil(std::log2(planet_num));
    vector<vector<int>> pow2_ends(planet_num, vector<int>(log2 + 1));

    for (int p = 0; p < planet_num; p++)
        pow2_ends[p][0] = next[p];

    for (int i = 1; i <= log2; i++)
        for (int p = 0; p < planet_num; p++) 
            pow2_ends[p][i] = pow2_ends[pow2_ends[p][i - 1]][i - 1];

    auto advance = [&](int pos, int dist){
        for (int pow = log2; pow >= 0; pow--)
            if ((dist & (1 << pow)) != 0) pos = pow2_ends[pos][pow];

        return pos;
    };

    for (int q = 0; q < query_num; q++){
        int u, v; // going from u to v
        std::cin >> u >> v;
        u--;
        v--;
        if (cycle_id[pow2_ends[u][log2]] != cycle_id[pow2_ends[v][log2]]){
            cout << -1 << '\n';
            continue;
        }

        if (cycle_id[u] != -1 || cycle_id[v] != -1){
            if (cycle_id[v] == -1 && cycle_id[u] != -1){
                cout << -1 << '\n';
                continue;
            }

            // Handle the 2nd & 3rd cases at the same time.
            int dist = cyc_dist[u];
            int u_cyc = advance(u, cyc_dist[u]); // The root of u's tree
            std::map<int, int> &cyc = cycles[cycle_id[u_cyc]]; // u and v's cycle
            int u_ind = cyc[u_cyc];
            int v_ind = cyc[v];
            int diff = u_ind <= v_ind ? v_ind - u_ind : cyc.size() - (u_ind - v_ind);
            cout << dist + diff << '\n';
        }
        else{
            if (cyc_dist[v] > cyc_dist[u]){
                cout << -1 << '\n';
                continue;
            }

            int diff = cyc_dist[u] - cyc_dist[v];
            cout << (advance(u, diff) == v ? diff : -1) << '\n';
        }
    }
}

int32_t main(){
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int ans1 = 0, ans2 = 0, n1;

    // Write limits to below
    int limitn = 1.5 * 10e5, limita = (1 << 30);
    // int limitn = 4, limita = (1 << 2);

    vi input1;
    srand(time(0));
    while (ans1 == ans2)
    {
        n1 = rand() % limitn + 1;
        input1 = vi(n1, 0);
        forn(i, n1)
        {
            input1[i] = (rand() % limita);
        }
        ans1 = solve1(n1, input1);
        ans2 = solve2(n1, input1);
    }
    out("Wrong in case : ");
    cout << "N is : " << n1 << endl;
    cout << "Input is:" << endl;
    for (auto x : input1)
        cout << x << " ";
    cout << endl;
    cout << "Judge Output: " << ans2 << endl;
    cout << "User Output: " << ans1 << endl;
    return 0;
}
